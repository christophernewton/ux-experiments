html {
  box-sizing: border-box; }

*, *::after, *::before {
  box-sizing: inherit; }

/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Correct the line height in all browsers.
 * 3. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
/* Document
   ========================================================================== */
html {
  font-family: sans-serif;
  /* 1 */
  line-height: 1.15;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 3 */
  -webkit-text-size-adjust: 100%;
  /* 3 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */
figcaption,
figure,
main {
  /* 1 */
  display: block; }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */
a:active,
a:hover {
  outline-width: 0; }

/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */
details,
menu {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block; }

/**
 * Add the correct display in IE.
 */
template {
  display: none; }

/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none; }

@keyframes dash {
  0% {
    stroke-dashoffset: 400;
    opacity: 0.7; }
  100% {
    stroke-dashoffset: 0;
    opacity: 1; } }

@keyframes opacity {
  0% {
    opacity: -5; }
  100% {
    opacity: 1; } }

@keyframes opacityHide {
  0% {
    opacity: 1; }
  100% {
    opacity: 0; } }

@keyframes taglineFade {
  0% {
    opacity: 0;
    -webkit-transform: translate(-10px, 0);
    -moz-transform: translate(-10px, 0);
    -ms-transform: translate(-10px, 0);
    -o-transform: translate(-10px, 0);
    transform: translate(-10px, 0); }
  100% {
    opacity: 1;
    -webkit-transform: translate(10px, 0);
    -moz-transform: translate(10px, 0);
    -ms-transform: translate(10px, 0);
    -o-transform: translate(10px, 0);
    transform: translate(10px, 0); } }

header {
  position: relative;
  z-index: 2;
  padding: 20px 0; }
  header .logo__link {
    display: block;
    text-align: center; }
    header .logo__link::after {
      clear: both;
      content: "";
      display: table; }
    @media screen and (min-width: 64rem) {
      header .logo__link {
        float: left; } }
  header .logo {
    display: inline-block;
    max-width: 100%;
    height: auto; }
    header .logo .logo__lines path {
      -webkit-animation: dash 3s cubic-bezier(0.25, 0.46, 0.45, 0.94) alternate forwards 0.5s, opacityHide 3s cubic-bezier(0.25, 0.46, 0.45, 0.94) alternate forwards 5.5s;
      -moz-animation: dash 3s cubic-bezier(0.25, 0.46, 0.45, 0.94) alternate forwards 0.5s, opacityHide 3s cubic-bezier(0.25, 0.46, 0.45, 0.94) alternate forwards 5.5s;
      animation: dash 3s cubic-bezier(0.25, 0.46, 0.45, 0.94) alternate forwards 0.5s, opacityHide 3s cubic-bezier(0.25, 0.46, 0.45, 0.94) alternate forwards 5.5s;
      stroke-dasharray: 400;
      stroke-dashoffset: 400; }
    header .logo .logo__fill path {
      -webkit-animation: opacity 1s cubic-bezier(0.25, 0.46, 0.45, 0.94) alternate forwards 5s;
      -moz-animation: opacity 1s cubic-bezier(0.25, 0.46, 0.45, 0.94) alternate forwards 5s;
      animation: opacity 1s cubic-bezier(0.25, 0.46, 0.45, 0.94) alternate forwards 5s;
      opacity: 0; }
    header .logo .logo__fill path:nth-child(1), header .logo .logo__lines path:nth-child(1) {
      animation-delay: 0.4s; }
    header .logo .logo__fill path:nth-child(2), header .logo .logo__lines path:nth-child(2) {
      animation-delay: 0.8s; }
    header .logo .logo__fill path:nth-child(3), header .logo .logo__lines path:nth-child(3) {
      animation-delay: 1.2s; }
    header .logo .logo__fill path:nth-child(4), header .logo .logo__lines path:nth-child(4) {
      animation-delay: 1.6s; }
    header .logo .logo__fill path:nth-child(5), header .logo .logo__lines path:nth-child(5) {
      animation-delay: 2s; }
    header .logo .logo__fill path:nth-child(6), header .logo .logo__lines path:nth-child(6) {
      animation-delay: 2.4s; }
    header .logo .logo__fill path:nth-child(7), header .logo .logo__lines path:nth-child(7) {
      animation-delay: 2.8s; }
    header .logo .logo__fill path:nth-child(8), header .logo .logo__lines path:nth-child(8) {
      animation-delay: 3.2s; }
    header .logo .logo__fill path:nth-child(9), header .logo .logo__lines path:nth-child(9) {
      animation-delay: 3.6s; }
    header .logo .logo__fill path:nth-child(10), header .logo .logo__lines path:nth-child(10) {
      animation-delay: 4s; }
    header .logo .logo__fill path:nth-child(11), header .logo .logo__lines path:nth-child(11) {
      animation-delay: 4.4s; }
    @media screen and (min-width: 64rem) {
      header .logo {
        float: left; } }
  header .header__tagline {
    -webkit-transform: translate(0, 0);
    -moz-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    -o-transform: translate(0, 0);
    transform: translate(0, 0);
    -webkit-animation: taglineFade 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) alternate forwards 5s;
    -moz-animation: taglineFade 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) alternate forwards 5s;
    animation: taglineFade 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) alternate forwards 5s;
    margin: 4px 0 0 0px;
    font-size: 12px;
    opacity: 0;
    color: #fff;
    line-height: 20px;
    text-align: center; }
    @media screen and (min-width: 64rem) {
      header .header__tagline {
        float: left;
        margin-left: 10px;
        text-align: left; } }
    header .header__tagline .fa-envelope {
      margin-right: 5px; }
  header .header__inner {
    position: relative;
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
    height: initial;
    width: 85%; }
    header .header__inner::after {
      clear: both;
      content: "";
      display: table; }
    @media screen and (min-width: 46.875rem) {
      header .header__inner {
        max-width: 95%;
        margin-left: auto;
        margin-right: auto;
        height: initial;
        width: 95%; }
        header .header__inner::after {
          clear: both;
          content: "";
          display: table; } }
    @media screen and (min-width: 64rem) {
      header .header__inner {
        max-width: 64rem;
        margin-left: auto;
        margin-right: auto;
        height: initial;
        width: 95%; }
        header .header__inner::after {
          clear: both;
          content: "";
          display: table; } }
    @media screen and (min-width: 75rem) {
      header .header__inner {
        max-width: 93.75rem;
        margin-left: auto;
        margin-right: auto;
        height: initial;
        width: 95%; }
        header .header__inner::after {
          clear: both;
          content: "";
          display: table; } }

footer {
  position: fixed;
  bottom: 0;
  background: #282828;
  width: 100%;
  padding: 20px; }
  footer .footer__inner {
    position: relative;
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
    height: initial;
    width: 85%;
    color: #fff; }
    footer .footer__inner::after {
      clear: both;
      content: "";
      display: table; }
    @media screen and (min-width: 46.875rem) {
      footer .footer__inner {
        max-width: 95%;
        margin-left: auto;
        margin-right: auto;
        height: initial;
        width: 95%; }
        footer .footer__inner::after {
          clear: both;
          content: "";
          display: table; } }
    @media screen and (min-width: 64rem) {
      footer .footer__inner {
        max-width: 64rem;
        margin-left: auto;
        margin-right: auto;
        height: initial;
        width: 95%; }
        footer .footer__inner::after {
          clear: both;
          content: "";
          display: table; } }
    @media screen and (min-width: 75rem) {
      footer .footer__inner {
        max-width: 93.75rem;
        margin-left: auto;
        margin-right: auto;
        height: initial;
        width: 95%; }
        footer .footer__inner::after {
          clear: both;
          content: "";
          display: table; } }

.ui {
  font-family: 'Open Sans', arial;
  font-size: 14px;
  background: none; }
  .ui p {
    line-height: 30px; }
  .ui a {
    text-decoration: none; }
  .ui nav {
    /* Level 1 */ }
    .ui nav a {
      display: block;
      font-size: 16px; }
      .ui nav a .fa {
        margin-right: 20px;
        display: inline-block;
        min-width: 14px; }
    .ui nav ul {
      padding: 0;
      margin: 0;
      list-style-type: none; }
    @media screen and (min-width: 64rem) {
      .ui nav {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1;
        width: 240px;
        height: 100%;
        /* Level 2 */ }
        .ui nav:before {
          position: fixed;
          top: 0;
          left: 0;
          height: 100%;
          width: 240px;
          content: '';
          background: #1f2022;
          z-index: 1; }
        .ui nav:hover + .container {
          -webkit-transition: filter 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94) 1000ms;
          -moz-transition: filter 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94) 1000ms;
          transition: filter 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94) 1000ms;
          filter: blur(5px);
          /* filter:url(#blur); */ }
        .ui nav > ul > li {
          position: relative;
          /* li hover for level 2 */ }
          .ui nav > ul > li:before, .ui nav > ul > li:after {
            content: '';
            display: block; }
          .ui nav > ul > li:after {
            position: absolute;
            top: 0;
            left: 0;
            -webkit-transition: all 1000ms cubic-bezier(0.19, 1, 0.22, 1);
            -moz-transition: all 1000ms cubic-bezier(0.19, 1, 0.22, 1);
            transition: all 1000ms cubic-bezier(0.19, 1, 0.22, 1);
            -webkit-transform: translate(-100%, 0);
            -moz-transform: translate(-100%, 0);
            -ms-transform: translate(-100%, 0);
            -o-transform: translate(-100%, 0);
            transform: translate(-100%, 0);
            z-index: 10;
            width: 100%;
            height: 100%; }
          .ui nav > ul > li:before {
            position: absolute;
            top: 0;
            left: 0;
            -webkit-transition: all 1000ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
            -moz-transition: all 1000ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
            transition: all 1000ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
            z-index: 20;
            width: 100%;
            height: 100%;
            background: -moz-linear-gradient(left, #1f2022 0%, #1f2022 10%, rgba(31, 32, 34, 0) 100%);
            /* FF3.6-15 */
            background: -webkit-linear-gradient(left, #1f2022 0%, #1f2022 10%, rgba(31, 32, 34, 0) 100%);
            /* Chrome10-25,Safari5.1-6 */
            background: linear-gradient(to right, #1f2022 0%, #1f2022 10%, rgba(31, 32, 34, 0) 100%);
            /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
            filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#1f2022', endColorstr='#001f2022',GradientType=1 );
            /* IE6-9 */ }
          .ui nav > ul > li:hover:after {
            -webkit-transform: translate(0%, 0);
            -moz-transform: translate(0%, 0);
            -ms-transform: translate(0%, 0);
            -o-transform: translate(0%, 0);
            transform: translate(0%, 0); }
          .ui nav > ul > li:hover:before {
            opacity: 0; }
          .ui nav > ul > li:hover > ul {
            -webkit-transition: all 300ms cubic-bezier(0.19, 1, 0.22, 1) 800ms;
            -moz-transition: all 300ms cubic-bezier(0.19, 1, 0.22, 1) 800ms;
            transition: all 300ms cubic-bezier(0.19, 1, 0.22, 1) 800ms;
            -webkit-transform: translate(240px);
            -moz-transform: translate(240px);
            -ms-transform: translate(240px);
            -o-transform: translate(240px);
            transform: translate(240px);
            opacity: 1;
            pointer-events: auto; }
          .ui nav > ul > li > a {
            position: relative;
            z-index: 30;
            padding: 15px 10px 15px 20px; }
        .ui nav > ul > li > ul {
          position: fixed;
          top: 0;
          left: 0;
          -webkit-transition: all 100ms cubic-bezier(0.19, 1, 0.22, 1) 500ms;
          -moz-transition: all 100ms cubic-bezier(0.19, 1, 0.22, 1) 500ms;
          transition: all 100ms cubic-bezier(0.19, 1, 0.22, 1) 500ms;
          pointer-events: none;
          padding-top: 119px;
          width: 300px;
          height: 100%;
          z-index: 0;
          opacity: 0; }
          .ui nav > ul > li > ul a {
            -webkit-transition: all 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
            -moz-transition: all 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
            transition: all 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
            padding: 15px 10px 15px 20px; }
        .ui nav .nav__content:after, .ui nav .nav__content ul {
          background-color: #0ba6e0;
          /* box-shadow:0px 0px 20px 20px rgba(11,166,224,1); */ }
        .ui nav .nav__content ul a:hover {
          background-color: #0a9bd1; }
        .ui nav .nav__connections:after, .ui nav .nav__connections ul {
          background-color: #fa5000;
          /* box-shadow:0px 0px 20px 20px rgba(250,80,2,1); */ }
        .ui nav .nav__connections ul a:hover {
          background-color: #eb4b00; }
        .ui nav .nav__interactions:after, .ui nav .nav__interactions ul {
          background-color: #e1059b;
          /* box-shadow:0px 0px 20px 20px rgba(225,5,155,1); */ }
        .ui nav .nav__interactions ul a:hover {
          background-color: #d20591; }
        .ui nav .nav__transactions:after, .ui nav .nav__transactions ul {
          background-color: #81be0a;
          /* box-shadow:0px 0px 20px 20px rgba(129,190,10,1); */ }
        .ui nav .nav__transactions ul a:hover {
          background-color: #77af09; }
        .ui nav .logo {
          position: relative;
          z-index: 2;
          padding: 30px 20px; } }
  .ui .container {
    -webkit-transition: filter 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94) 0ms;
    -moz-transition: filter 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94) 0ms;
    transition: filter 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94) 0ms;
    padding: 32px 20px 40px 280px; }
    .ui .container h1 {
      margin: 0; }

body.portfolio, html {
  height: 100%;
  background-color: #7b2721; }

body.portfolio {
  background: url("/images/bg.jpg") center center no-repeat;
  background-size: cover;
  background-color: #eee;
  font-family: Lato, arial;
  font-weight: 400;
  color: #282627;
  font-size: 16px;
  min-height: 100vh; }

main {
  min-height: calc(100vh - 190px); }
  main:before {
    position: absolute;
    top: 0;
    -webkit-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    -moz-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    height: 100%;
    width: 100%;
    z-index: 1;
    opacity: 0.5;
    display: block;
    content: '';
    background: #2196f3;
    /* Old browsers */
    background: -moz-linear-gradient(top, #2196f3 0%, #8f6b92 50%, #f44336 100%);
    /* FF3.6-15 */
    background: -webkit-linear-gradient(top, #2196f3 0%, #8f6b92 50%, #f44336 100%);
    /* Chrome10-25,Safari5.1-6 */
    background: linear-gradient(to bottom, #2196f3 0%, #8f6b92 50%, #f44336 100%);
    /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#2196f3', endColorstr='#f44336',GradientType=0 );
    /* IE6-9 */ }
    @media screen and (min-width: 46.875rem) {
      main:before {
        background: #2196f3;
        /* Old browsers */
        background: -moz-linear-gradient(-45deg, #2196f3 0%, #f44336 100%);
        /* FF3.6-15 */
        background: -webkit-linear-gradient(-45deg, #2196f3 0%, #f44336 100%);
        /* Chrome10-25,Safari5.1-6 */
        background: linear-gradient(135deg, #2196f3 0%, #f44336 100%);
        /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#2196f3', endColorstr='#f44336',GradientType=1 );
        /* IE6-9 fallback on horizontal gradient */ } }

a {
  color: #eee; }

input[type="checkbox"] {
  display: none; }

::-moz-selection {
  color: #fff;
  background: #8f6b92; }

::selection {
  color: #fff;
  background: #8f6b92; }

.project {
  position: absolute;
  top: 160px;
  width: 100%;
  z-index: 2; }
  .project::after {
    clear: both;
    content: "";
    display: table; }
  .project .project__screen {
    display: -webkit-box;
    display: -moz-box;
    display: box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: horizontal;
    -moz-box-orient: horizontal;
    box-orient: horizontal;
    -webkit-box-direction: normal;
    -moz-box-direction: normal;
    box-direction: normal;
    -webkit-flex-direction: row;
    -moz-flex-direction: row;
    flex-direction: row;
    -ms-flex-direction: row;
    -webkit-box-pack: distribute;
    -moz-box-pack: distribute;
    box-pack: distribute;
    -webkit-justify-content: space-around;
    -moz-justify-content: space-around;
    -ms-justify-content: space-around;
    -o-justify-content: space-around;
    justify-content: space-around;
    -ms-flex-pack: distribute;
    margin-bottom: 40px; }
    .project .project__screen .project__dot--1, .project .project__screen .project__dot--2, .project .project__screen .project__dot--3 {
      height: 100px;
      width: 100px;
      border-top-left-radius: 100px;
      border-top-right-radius: 100px;
      border-bottom-left-radius: 100px;
      border-bottom-right-radius: 100px;
      -webkit-box-flex: 1;
      -moz-box-flex: 1;
      box-flex: 1;
      -webkit-flex: 1;
      -moz-flex: 1;
      -ms-flex: 1;
      flex: 1;
      -webkit-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      -moz-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      -webkit-transform: translateX(-20px) rotate(-10deg);
      -moz-transform: translateX(-20px) rotate(-10deg);
      -ms-transform: translateX(-20px) rotate(-10deg);
      -o-transform: translateX(-20px) rotate(-10deg);
      transform: translateX(-20px) rotate(-10deg);
      opacity: 0;
      max-width: 100px;
      color: #fff;
      font-size: 14px;
      text-align: center; }
      .project .project__screen .project__dot--1 .fa, .project .project__screen .project__dot--2 .fa, .project .project__screen .project__dot--3 .fa {
        color: #fff;
        display: block;
        font-size: 18px;
        text-align: center;
        padding: 20px 0 10px 0; }
        @media screen and (min-width: 46.875rem) {
          .project .project__screen .project__dot--1 .fa, .project .project__screen .project__dot--2 .fa, .project .project__screen .project__dot--3 .fa {
            padding: 30px 0 10px 0;
            font-size: 40px; } }
      .project .project__screen .project__dot--1 .project__task, .project .project__screen .project__dot--2 .project__task, .project .project__screen .project__dot--3 .project__task {
        -webkit-transform: translateX(-10px);
        -moz-transform: translateX(-10px);
        -ms-transform: translateX(-10px);
        -o-transform: translateX(-10px);
        transform: translateX(-10px);
        -webkit-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        -moz-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        opacity: 0;
        font-size: 13px;
        font-weight: 700; }
        @media screen and (min-width: 46.875rem) {
          .project .project__screen .project__dot--1 .project__task, .project .project__screen .project__dot--2 .project__task, .project .project__screen .project__dot--3 .project__task {
            font-size: 16px; } }
      @media screen and (min-width: 46.875rem) {
        .project .project__screen .project__dot--1, .project .project__screen .project__dot--2, .project .project__screen .project__dot--3 {
          height: 150px;
          width: 150px;
          border-top-left-radius: 150px;
          border-top-right-radius: 150px;
          border-bottom-left-radius: 150px;
          border-bottom-right-radius: 150px;
          max-width: 150px; } }
    .project .project__screen .project__dot--1 {
      background: #2196F3;
      -webkit-transition-delay: 0s;
      -moz-transition-delay: 0s;
      transition-delay: 0s; }
      .project .project__screen .project__dot--1 .project__task {
        -webkit-transition-delay: 0.2s;
        -moz-transition-delay: 0.2s;
        transition-delay: 0.2s; }
    .project .project__screen .project__dot--2 {
      background: #8f6b92;
      -webkit-transition-delay: 0.1s;
      -moz-transition-delay: 0.1s;
      transition-delay: 0.1s; }
      .project .project__screen .project__dot--2 .project__task {
        -webkit-transition-delay: 0.3s;
        -moz-transition-delay: 0.3s;
        transition-delay: 0.3s; }
    .project .project__screen .project__dot--3 {
      background: #F44336;
      -webkit-transition-delay: 0.2s;
      -moz-transition-delay: 0.2s;
      transition-delay: 0.2s; }
      .project .project__screen .project__dot--3 .project__task {
        -webkit-transition-delay: 0.4s;
        -moz-transition-delay: 0.4s;
        transition-delay: 0.4s; }
  .project .project__description {
    position: relative;
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
    height: initial;
    width: 85%;
    color: #fff;
    line-height: 22px;
    padding-bottom: 100px; }
    .project .project__description::after {
      clear: both;
      content: "";
      display: table; }
    @media screen and (min-width: 46.875rem) {
      .project .project__description {
        max-width: 95%;
        margin-left: auto;
        margin-right: auto;
        height: initial;
        width: 95%; }
        .project .project__description::after {
          clear: both;
          content: "";
          display: table; } }
    @media screen and (min-width: 64rem) {
      .project .project__description {
        max-width: 64rem;
        margin-left: auto;
        margin-right: auto;
        height: initial;
        width: 95%; }
        .project .project__description::after {
          clear: both;
          content: "";
          display: table; } }
    @media screen and (min-width: 75rem) {
      .project .project__description {
        max-width: 93.75rem;
        margin-left: auto;
        margin-right: auto;
        height: initial;
        width: 95%; }
        .project .project__description::after {
          clear: both;
          content: "";
          display: table; } }
    .project .project__description h1, .project .project__description h2 {
      line-height: 36px; }
  .project .project__close {
    position: fixed;
    bottom: 0;
    -webkit-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0s;
    -moz-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0s;
    transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0s;
    width: 100%;
    background: rgba(0, 0, 0, 0.3);
    text-align: center;
    z-index: 10;
    opacity: 0;
    color: #fff;
    display: block;
    padding: 15px 40px;
    line-height: 30px;
    pointer-events: none; }
    .project .project__close:hover {
      cursor: pointer;
      will-change: transform, opacity; }
      .project .project__close:hover ~ .project__close,
      .project .project__close:hover ~ .project__screen .project__dot--1,
      .project .project__close:hover ~ .project__screen .project__dot--2,
      .project .project__close:hover ~ .project__screen .project__dot--3,
      .project .project__close:hover ~ .project__description {
        will-change: transform, opacity; }
    .project .project__close .fa {
      font-size: 14px;
      margin-left: 10px; }
    @media screen and (min-width: 46.875rem) {
      .project .project__close {
        position: absolute;
        top: -165px;
        right: 0px;
        bottom: auto;
        left: auto;
        background: transparent;
        padding: 30px 40px;
        width: auto; } }
  .project .project__description {
    -webkit-transform: translate(-10px);
    -moz-transform: translate(-10px);
    -ms-transform: translate(-10px);
    -o-transform: translate(-10px);
    transform: translate(-10px);
    -webkit-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0s;
    -moz-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0s;
    transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0s;
    opacity: 0; }

.project__buttons {
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  box-orient: horizontal;
  -webkit-box-direction: normal;
  -moz-box-direction: normal;
  box-direction: normal;
  -webkit-flex-direction: row;
  -moz-flex-direction: row;
  flex-direction: row;
  -ms-flex-direction: row;
  -webkit-box-pack: distribute;
  -moz-box-pack: distribute;
  box-pack: distribute;
  -webkit-justify-content: space-around;
  -moz-justify-content: space-around;
  -ms-justify-content: space-around;
  -o-justify-content: space-around;
  justify-content: space-around;
  -ms-flex-pack: distribute;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  width: 100%;
  z-index: 5; }
  @media screen and (min-width: 46.875rem) {
    .project__buttons {
      position: absolute;
      top: 50%;
      -webkit-transform: translate(0, -50%);
      -moz-transform: translate(0, -50%);
      -ms-transform: translate(0, -50%);
      -o-transform: translate(0, -50%);
      transform: translate(0, -50%);
      -webkit-box-lines: single;
      -moz-box-lines: single;
      box-lines: single;
      -webkit-flex-wrap: nowrap;
      -moz-flex-wrap: nowrap;
      -ms-flex-wrap: nowrap;
      flex-wrap: nowrap; } }
  .project__buttons .project__title {
    border-top-left-radius: 300px;
    border-top-right-radius: 300px;
    border-bottom-left-radius: 300px;
    border-bottom-right-radius: 300px;
    -webkit-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    -moz-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    -webkit-box-flex: 1;
    -moz-box-flex: 1;
    box-flex: 1;
    -webkit-flex: 1;
    -moz-flex: 1;
    -ms-flex: 1;
    flex: 1;
    position: relative;
    height: 200px;
    width: 200px;
    max-width: 200px;
    pointer-events: auto;
    color: #fff;
    z-index: 3;
    margin: 0 20px 20px 20px;
    text-align: center;
    padding: 20px; }
    .project__buttons .project__title[for="project-1"] {
      background: url("/images/nintendo.png") #dd1402 no-repeat center center;
      background-size: cover; }
    .project__buttons .project__title[for="project-2"] {
      background: url("/images/mornington.jpg") no-repeat center center;
      background-size: cover; }
    .project__buttons .project__title[for="project-3"] {
      background: url("/images/rivalea.jpg") no-repeat center center;
      background-size: cover; }
    .project__buttons .project__title:before {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      border-top-left-radius: 100%;
      border-top-right-radius: 100%;
      border-bottom-left-radius: 100%;
      border-bottom-right-radius: 100%;
      -webkit-transform: scale(1);
      -moz-transform: scale(1);
      -ms-transform: scale(1);
      -o-transform: scale(1);
      transform: scale(1);
      -webkit-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      -moz-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      opacity: 0;
      content: '';
      background: rgba(0, 0, 0, 0.4); }
    .project__buttons .project__title:hover {
      -webkit-transform: translateY(-3px);
      -moz-transform: translateY(-3px);
      -ms-transform: translateY(-3px);
      -o-transform: translateY(-3px);
      transform: translateY(-3px);
      cursor: pointer;
      will-change: transform, opacity; }
      .project__buttons .project__title:hover:before {
        -webkit-transform: scale(1.05);
        -moz-transform: scale(1.05);
        -ms-transform: scale(1.05);
        -o-transform: scale(1.05);
        transform: scale(1.05);
        opacity: 1; }
      .project__buttons .project__title:hover ~ .project__close,
      .project__buttons .project__title:hover ~ .project__screen .project__dot--1,
      .project__buttons .project__title:hover ~ .project__screen .project__dot--2,
      .project__buttons .project__title:hover ~ .project__screen .project__dot--3,
      .project__buttons .project__title:hover ~ .project__description {
        will-change: transform, opacity; }
      @media screen and (min-width: 46.875rem) {
        .project__buttons .project__title:hover .project__heading {
          opacity: 1; } }
    @media screen and (min-width: 46.875rem) {
      .project__buttons .project__title {
        height: 200px;
        width: 200px;
        max-width: 200px;
        font-size: 14px; } }
    @media screen and (min-width: 64rem) {
      .project__buttons .project__title {
        height: 200px;
        width: 200px;
        max-width: 200px; } }
    @media screen and (min-width: 75rem) {
      .project__buttons .project__title {
        height: 300px;
        width: 300px;
        max-width: 300px; } }
  .project__buttons .project__heading {
    position: relative;
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
    -webkit-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    -moz-transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    opacity: 0; }
    @media screen and (min-width: 46.875rem) {
      .project__buttons .project__heading {
        position: absolute;
        top: 50%;
        left: 50%;
        -webkit-transform: translate(-50%, -50%);
        -moz-transform: translate(-50%, -50%);
        -ms-transform: translate(-50%, -50%);
        -o-transform: translate(-50%, -50%);
        transform: translate(-50%, -50%); } }

input.project-1:checked ~ main .project__buttons, input.project-2:checked ~ main .project__buttons, input.project-3:checked ~ main .project__buttons {
  pointer-events: none; }

input.project-1:checked ~ main:before, input.project-2:checked ~ main:before, input.project-3:checked ~ main:before {
  background: #2196f3;
  /* Old browsers */
  background: -moz-linear-gradient(top, #2196f3 0%, #8f6b92 50%, #f44336 100%);
  /* FF3.6-15 */
  background: -webkit-linear-gradient(top, #2196f3 0%, #8f6b92 50%, #f44336 100%);
  /* Chrome10-25,Safari5.1-6 */
  background: linear-gradient(to bottom, #2196f3 0%, #8f6b92 50%, #f44336 100%);
  /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#2196f3', endColorstr='#f44336',GradientType=0 );
  /* IE6-9 */ }

input.project-1:checked ~ main .project__title[for="project-1"] {
  -webkit-transform: rotate(0deg) scale(1.2);
  -moz-transform: rotate(0deg) scale(1.2);
  -ms-transform: rotate(0deg) scale(1.2);
  -o-transform: rotate(0deg) scale(1.2);
  transform: rotate(0deg) scale(1.2);
  opacity: 0;
  pointer-events: none; }

input.project-1:checked ~ main .project__title[for="project-2"], input.project-1:checked ~ main .project__title[for="project-3"] {
  -webkit-transform: rotate(45deg) scale(0);
  -moz-transform: rotate(45deg) scale(0);
  -ms-transform: rotate(45deg) scale(0);
  -o-transform: rotate(45deg) scale(0);
  transform: rotate(45deg) scale(0);
  opacity: 0;
  pointer-events: none; }

input.project-1:checked ~ main .project-2, input.project-1:checked ~ main .project-3 {
  pointer-events: none; }

input.project-1:checked ~ main .project-1 .project__screen .project__dot--1, input.project-1:checked ~ main .project-1 .project__screen .project__dot--2, input.project-1:checked ~ main .project-1 .project__screen .project__dot--3 {
  -webkit-transform: translateX(0px) rotate(0deg);
  -moz-transform: translateX(0px) rotate(0deg);
  -ms-transform: translateX(0px) rotate(0deg);
  -o-transform: translateX(0px) rotate(0deg);
  transform: translateX(0px) rotate(0deg);
  opacity: 1; }

input.project-1:checked ~ main .project-1 .project__screen .project__task {
  -webkit-transform: translateX(0px);
  -moz-transform: translateX(0px);
  -ms-transform: translateX(0px);
  -o-transform: translateX(0px);
  transform: translateX(0px);
  opacity: 1; }

input.project-1:checked ~ main .project-1 .project__close {
  -webkit-transition-delay: 0.4s;
  -moz-transition-delay: 0.4s;
  transition-delay: 0.4s;
  -webkit-transform: translateX(0px);
  -moz-transform: translateX(0px);
  -ms-transform: translateX(0px);
  -o-transform: translateX(0px);
  transform: translateX(0px);
  opacity: 1;
  pointer-events: auto; }

input.project-1:checked ~ main .project-1 .project__description {
  -webkit-transform: translateX(0px);
  -moz-transform: translateX(0px);
  -ms-transform: translateX(0px);
  -o-transform: translateX(0px);
  transform: translateX(0px);
  -webkit-transition-delay: 0.6s;
  -moz-transition-delay: 0.6s;
  transition-delay: 0.6s;
  opacity: 1; }

input.project-2:checked ~ main .project__title[for="project-2"] {
  -webkit-transform: rotate(0deg) scale(1.2);
  -moz-transform: rotate(0deg) scale(1.2);
  -ms-transform: rotate(0deg) scale(1.2);
  -o-transform: rotate(0deg) scale(1.2);
  transform: rotate(0deg) scale(1.2);
  opacity: 0;
  pointer-events: none; }

input.project-2:checked ~ main .project__title[for="project-1"], input.project-2:checked ~ main .project__title[for="project-3"] {
  -webkit-transform: rotate(45deg) scale(0);
  -moz-transform: rotate(45deg) scale(0);
  -ms-transform: rotate(45deg) scale(0);
  -o-transform: rotate(45deg) scale(0);
  transform: rotate(45deg) scale(0);
  opacity: 0;
  pointer-events: none; }

input.project-2:checked ~ main .project-1, input.project-2:checked ~ main .project-3 {
  pointer-events: none; }

input.project-2:checked ~ main .project-2 .project__screen .project__dot--1, input.project-2:checked ~ main .project-2 .project__screen .project__dot--2, input.project-2:checked ~ main .project-2 .project__screen .project__dot--3 {
  -webkit-transform: translateX(0px) rotate(0deg);
  -moz-transform: translateX(0px) rotate(0deg);
  -ms-transform: translateX(0px) rotate(0deg);
  -o-transform: translateX(0px) rotate(0deg);
  transform: translateX(0px) rotate(0deg);
  opacity: 1; }

input.project-2:checked ~ main .project-2 .project__screen .project__task {
  -webkit-transform: translateX(0px);
  -moz-transform: translateX(0px);
  -ms-transform: translateX(0px);
  -o-transform: translateX(0px);
  transform: translateX(0px);
  opacity: 1; }

input.project-2:checked ~ main .project-2 .project__close {
  -webkit-transition-delay: 0.4s;
  -moz-transition-delay: 0.4s;
  transition-delay: 0.4s;
  -webkit-transform: translateX(0px);
  -moz-transform: translateX(0px);
  -ms-transform: translateX(0px);
  -o-transform: translateX(0px);
  transform: translateX(0px);
  opacity: 1;
  pointer-events: auto; }

input.project-2:checked ~ main .project-2 .project__description {
  -webkit-transform: translateX(0px);
  -moz-transform: translateX(0px);
  -ms-transform: translateX(0px);
  -o-transform: translateX(0px);
  transform: translateX(0px);
  -webkit-transition-delay: 0.6s;
  -moz-transition-delay: 0.6s;
  transition-delay: 0.6s;
  opacity: 1; }

input.project-3:checked ~ main .project__title[for="project-3"] {
  -webkit-transform: rotate(0deg) scale(1.2);
  -moz-transform: rotate(0deg) scale(1.2);
  -ms-transform: rotate(0deg) scale(1.2);
  -o-transform: rotate(0deg) scale(1.2);
  transform: rotate(0deg) scale(1.2);
  opacity: 0;
  pointer-events: none; }

input.project-3:checked ~ main .project__title[for="project-1"], input.project-3:checked ~ main .project__title[for="project-2"] {
  -webkit-transform: rotate(45deg) scale(0);
  -moz-transform: rotate(45deg) scale(0);
  -ms-transform: rotate(45deg) scale(0);
  -o-transform: rotate(45deg) scale(0);
  transform: rotate(45deg) scale(0);
  opacity: 0;
  pointer-events: none; }

input.project-3:checked ~ main .project-1, input.project-3:checked ~ main .project-2 {
  pointer-events: none; }

input.project-3:checked ~ main .project-3 .project__screen .project__dot--1, input.project-3:checked ~ main .project-3 .project__screen .project__dot--2, input.project-3:checked ~ main .project-3 .project__screen .project__dot--3 {
  -webkit-transform: translateX(0px) rotate(0deg);
  -moz-transform: translateX(0px) rotate(0deg);
  -ms-transform: translateX(0px) rotate(0deg);
  -o-transform: translateX(0px) rotate(0deg);
  transform: translateX(0px) rotate(0deg);
  opacity: 1; }

input.project-3:checked ~ main .project-3 .project__screen .project__task {
  -webkit-transform: translateX(0px);
  -moz-transform: translateX(0px);
  -ms-transform: translateX(0px);
  -o-transform: translateX(0px);
  transform: translateX(0px);
  opacity: 1; }

input.project-3:checked ~ main .project-3 .project__close {
  -webkit-transition-delay: 0.4s;
  -moz-transition-delay: 0.4s;
  transition-delay: 0.4s;
  -webkit-transform: translateX(0px);
  -moz-transform: translateX(0px);
  -ms-transform: translateX(0px);
  -o-transform: translateX(0px);
  transform: translateX(0px);
  opacity: 1;
  pointer-events: auto; }

input.project-3:checked ~ main .project-3 .project__description {
  -webkit-transform: translateX(0px);
  -moz-transform: translateX(0px);
  -ms-transform: translateX(0px);
  -o-transform: translateX(0px);
  transform: translateX(0px);
  -webkit-transition-delay: 0.6s;
  -moz-transition-delay: 0.6s;
  transition-delay: 0.6s;
  opacity: 1; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
